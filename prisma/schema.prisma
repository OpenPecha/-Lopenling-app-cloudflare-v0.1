generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id             String   @id @default(uuid())
  type           String
  avatar         String
  topic_id       Int
  post_id        Int
  content        String
  audioUrl       String?
  created_at     DateTime @default(now())
  creatorUser_id String
  text_id        Int
  thread_id      String
  creatorUser    User     @relation("creatorPost", fields: [creatorUser_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Text           Text     @relation(fields: [text_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Reply          Reply[]
  likedBy        User[]   @relation("likedPost")
}

model Reply {
  id         String   @id @unique
  isAproved  Boolean?
  post_id    String
  parentPost Post     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  likedBy    User[]   @relation("ReplylikedUser")
}

model Text {
  id         Int          @id @unique @default(autoincrement())
  name       String
  author     User?        @relation(fields: [userId], references: [id])
  content    String
  Post       Post[]
  Suggestion Suggestion[]
  userId     String?
}

model Suggestion {
  id         String    @id @unique @default(uuid())
  text       Text      @relation(fields: [textId], references: [id], onDelete: Cascade)
  textId     Int
  oldValue   String
  newValue   String
  user       User      @relation("suggestionCreator", fields: [userId], references: [id])
  userId     String
  threadId   String
  likedBy    User[]    @relation("likedSuggestion")
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model User {
  id              String          @id @unique @default(uuid())
  name            String
  username        String          @unique
  email           String          @unique
  role            Role            @default(BASIC)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  isAdmin         Boolean
  avatarUrl       String
  likedPost       Post[]          @relation("likedPost")
  likedReply      Reply[]         @relation("ReplylikedUser")
  likedSuggestion Suggestion[]    @relation("likedSuggestion")
  Post            Post[]          @relation("creatorPost")
  Suggestion      Suggestion[]    @relation("suggestionCreator")
  Text            Text[]
  preference      UserPreference? @relation(fields: [preferenceId], references: [id])
  preferenceId    Int             @unique

  @@index([email, username])
}

model UserPreference {
  id       Int    @id @default(autoincrement())
  theme    String @default("light")
  language String @default("en")
  User     User?
}

enum Role {
  BASIC
  SCHOLAR
}
