generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Post {
  id             String   @id @default(uuid())
  type           String
  avatar         String
  topic_id       Int
  post_id        Int
  content        String
  audioUrl       String?
  created_at     DateTime @default(now())
  creatorUser_id String
  pageId         String
  threadId       String
  selection      String?
  creatorUser    User     @relation("creatorPost", fields: [creatorUser_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  page           Page     @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  text           Text     @relation(fields: [textId], references: [id],onDelete: Cascade, onUpdate: NoAction)
  reply          Reply[]
  likedBy        User[]   @relation("likedPost")
  textId         Int
}

model Reply {
  id          String   @id @unique
  is_approved Boolean?
  post_id     String
  parentPost  Post     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  likedBy     User[]   @relation("ReplylikedUser")
}

model Text {
  id         Int          @id @unique @default(autoincrement())
  name       String
  userId     String?
  author     User?        @relation(fields: [userId], references: [id])
  Page       Page[]
  Suggestion Suggestion[]
  Post       Post[]
  createdAt  DateTime?     @default(now())
  updatedAt  DateTime?    @updatedAt
}

model Page {
  id         String       @id @unique @default(uuid())
  text       Text         @relation(fields: [textId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order      Int
  content    String
  textId     Int
  Post       Post[]
  Suggestion Suggestion[]
  imageUrl   String
}

model Suggestion {
  id                String              @id @unique @default(uuid())
  pageId            String
  oldValue          String?
  newValue          String
  userId            String
  threadId          String
  created_at        DateTime            @default(now())
  updated_at        DateTime?           @updatedAt
  audioUrl          String?
  version           String?
  page              Page                @relation(fields: [pageId], references: [id],onDelete: Cascade, onUpdate: NoAction)
  text              Text                @relation(fields: [textId], references: [id],onDelete: Cascade, onUpdate: NoAction)
  user              User                @relation("suggestionCreator", fields: [userId], references: [id])
  SuggestionComment SuggestionComment[]
  likedBy           User[]              @relation("likedSuggestion")
  textId            Int
}

model SuggestionComment {
  id           Int        @id @default(autoincrement())
  text         String
  audioUrl     String?
  suggestionId String
  created_at   DateTime   @default(now())
  updated_at   DateTime?  @updatedAt
  userId       String
  type         String?
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  author       User       @relation(fields: [userId], references: [id])
}

model User {
  id                String              @id @unique @default(uuid())
  email             String              @unique
  avatarUrl         String
  created_at        DateTime            @default(now())
  isAdmin           Boolean
  name              String
  preferenceId      Int?                @unique
  updated_at        DateTime?           @updatedAt
  username          String              @unique
  Post              Post[]              @relation("creatorPost")
  Suggestion        Suggestion[]        @relation("suggestionCreator")
  SuggestionComment SuggestionComment[]
  Text              Text[]
  preference        UserPreference?     @relation(fields: [preferenceId], references: [id],onDelete: Cascade, onUpdate: NoAction)
  likedReply        Reply[]             @relation("ReplylikedUser")
  likedPost         Post[]              @relation("likedPost")
  likedSuggestion   Suggestion[]        @relation("likedSuggestion")

  @@index([email, username])
}

model UserPreference {
  id       Int    @id @default(autoincrement())
  theme    String @default("light")
  language String @default("en")
  User     User?
}
